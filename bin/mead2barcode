#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'pp'
require 'rubygems'
require 'mead'
require 'mead/trollop'
require 'trollop'
include Mead::TrollopOptions

opts = Trollop::options do
  banner <<-EOS
This script takes a mead (an identifier of a particular format), creates a 
barcode and returns the path to the barcode. Gbarcode and RMagick gems must be
installed for this to work.

Usage Example:
  mead2barcode --mead mc00240-001-ff0052-000-001 --baseurl http://www.lib.ncsu.edu/findingaids --ruby [options]

where options are:
EOS
  opt :mead, "A mead-style identifier", :type => String
  opt :meadfile, "Path to text file with one mead identifier on each line.", :type => String
  opt :baseurl, 'Specify just the base URL for grabbing the EAD XML if it is of the format baseurl/eadid.xml.', :type => String
  opt :url, 'Specify the whole URL for grabbing the EAD XML.', :type => String
  opt :file, 'File path to EAD XML.', :type => String
  opt :dir, 'Directory to save the barcodes.', :type => String
end

unless opts[:mead] or opts[:meadfile]
  Trollop::die 'You must specify either a single mead identifier or a file of identifiers'
end

check_options(opts)
location = get_location(opts)

if opts[:mead]
 meads = [opts[:mead]]
else
  Trollop::die 'meadfile must be a valid path' unless File.exists?(opts[:meadfile])
  meads = File.open(opts[:meadfile], 'r').read.split
end

successful_paths = []
meads.each do |mead_identifier|
  begin
    mead = Mead::Identifier.new(mead_identifier, location).extract

    barcode = Mead::Barcode.new(mead)

    if opts[:dir]
      Trollop::die 'Directory must exist!' unless File.exists?(opts[:dir])
    end
    directory = opts[:dir] || Dir.pwd

    label_path = barcode.output_label(directory)
    successful_paths << label_path
    puts label_path
  rescue => e
    puts mead_identifier + ' ' + e
  end
end

#`convert #{successful_paths.join(' ')} -append -antialias output.png`

