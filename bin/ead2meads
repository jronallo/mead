#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'pp'
require 'rubygems'
require 'mead'
require 'mead/trollop'
require 'trollop'
include Mead::TrollopOptions

#eadid, baseurl
opts = Trollop::options do
  banner <<-EOS
This script takes an EAD XML document and returns mead identifiers and metadata 
for it. It is possible to validate whether the parsed EAD XML provides unique
identifiers for all component parts.

Usage Example:
  ead2meads --url http://www.lib.ncsu.edu/findingaids/mc00240.xml [options]

Default output is pretty printed Ruby. Multiple outputs can be specified.

where options are:
EOS
  opt :eadid, 'Eadid of the EAD.', :type => String
  opt :url, 'Specify the whole URL for grabbing the EAD XML.', :type => String
  opt :file, 'File path to EAD XML.', :type => String
  opt :ruby, 'Output as pretty printed Ruby.'
  opt :json, 'Output as JSON'
  opt :csv, 'Output as CSV. Default.'
  opt :valid, 'Only outputs whether the EAD creates valid identifiers or not.'
  opt :verbose, 'Outputs the list of invalid containers in cases where invalid.'
  opt :meadsonly, 'Only output a list of mead identifiers.'
end

check_options(opts)
location = get_location_options(opts)

options = {}
options[:eadid] = opts[:eadid] if opts[:eadid]
options.merge!(location)

begin
  ead = Mead::Ead.new(options)
rescue => e
  puts e
  puts e.backtrace
  exit
end

if opts[:valid]
  if ead.valid?
    puts 'Valid.'
  else
    if opts[:verbose]
      puts Mead::Ead.to_csv(ead.invalid) if opts[:csv]
      pp ead.invalid           if opts[:ruby]
      puts ead.invalid.to_json if opts[:json]

      if !opts[:csv] and !opts[:ruby] and !opts[:json]
        puts Mead::Ead.to_csv(ead.invalid)
      end
    end
    puts 'Invalid!'
    puts 'Number of duplicate meads: ' + ead.dups.length.to_s
    puts 'Effected Containers: ' + ead.invalid.length.to_s
    
  end
else
  if opts[:meadsonly]
    puts ead.meads.join("\n")
  else
    puts ead.to_csv             if opts[:csv]
    pp ead.containers           if opts[:ruby]
    puts ead.containers.to_json if opts[:json]

    if !opts[:csv] and !opts[:ruby] and !opts[:json]
      puts ead.to_csv
    end
  end  
end
